openapi: 3.0.0
info:
  title: Common configuration Schema
  version: 1.0.0
components:
  schemas:
    logLevel:
      type: string
      enum:
        - trace
        - debug
        - info
        - warn
        - error
      default: info
      description: |
        "Log level defines the severity of messages that will be recorded in the application's
        logs. The available log levels are:
        - 'trace': Provides the most detailed logging, often used for debugging specific issues.
        - 'debug': Includes less verbose logging than 'trace', typically for development and debugging purposes.
        - 'info': Standard logging level that provides general application flow and operational information.
        - 'warn': Logs warnings that highlight potential issues or unexpected conditions that do not necessarily indicate a failure.
        - 'error': Logs errors that indicate a failure or significant issue in the application.

        The default value is 'info', which strikes a balance between verbosity and usefulness for most environments."
    ipAddress:
      type: string
      description: |
        "IP address in either IPv4 or IPv6 format. An IP address is used to uniquely identify
        a device on a network. This schema can accept both IPv4 addresses (e.g., '192.168.0.1')
        and IPv6 addresses (e.g., '2001:0db8:85a3:0000:0000:8a2e:0370:7334').

        The address must be in a valid format according to the respective version. IPv4 addresses
        are written as four decimal numbers (each between 0 and 255) separated by periods (e.g., '192.168.1.1').
        IPv6 addresses are written as eight groups of four hexadecimal digits, separated by colons (e.g., '2001:db8::ff00:42:8329').

        The format will be validated to ensure the correct syntax for either version."
      pattern: "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$|^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$"
      example: "192.168.1.1"
    port:
      type: integer
      minimum: 1
      maximum: 65535
      description: |
        "A TCP port number specifies the endpoint for network communication on the service.
        Port numbers range from 1 to 65535, with the lower range (1-1023) typically reserved for well-known services and system processes.
        It is important to choose a port within the allowed range that does not conflict with other services running on the host.

        Ensure that the selected port is open and accessible for communication while respecting the security policies of your network.
        Avoid using ports that are commonly blocked by firewalls or reserved for specific applications."
    tlsServerConfig:
      type: object
      description: |
        "TLS server configuration defines the settings for establishing secure TLS communication on the server-side. This configuration
        ensures that the server can securely encrypt data with clients, protecting against eavesdropping, tampering, and forgery.
        The configuration includes settings for the server's x.509 certificate and private key, which are essential for the TLS handshake."
      properties:
        cert:
          type: string
          description: |
            "Path to the x.509 certificate file, which is used by the server to authenticate itself to clients during the TLS handshake.
            The certificate must be issued by a trusted certificate authority (CA) or self-signed. The certificate is typically in PEM or DER format."
        key:
          type: string
          description: |
            "Path to the x.509 private key associated with the server's certificate.
            The private key should be kept secure and protected, as access to
            the key would allow attackers to impersonate the server.

            The private key is typically stored in a secure location and protected with strong access controls to ensure that it is only
            accessible by authorized processes."
    tlsClientConfig:
      type: object
      description: |
        "TLS client configuration defines the settings required to establish a secure
        connection to a server using TLS. It controls aspects such as certificate validation,
        server verification, and root certificate authorities used in the validation process."
      properties:
        insecureSkipVerify:
          type: boolean
          description: |
            "InsecureSkipVerify controls whether a client verifies the server's
            certificate chain and host name. If InsecureSkipVerify is true, crypto/tls
            accepts any certificate presented by the server and any host name in that
            certificate. In this mode, TLS is susceptible to machine-in-the-middle
            attacks unless custom verification is used. This should be used only for
            testing or in combination with VerifyConnection or VerifyPeerCertificate."
          validation:
            type: boolean
            allowedValues: [true, false]
            description: |
              "If true, skips verification of the server's certificate."
        serverName:
          type: string
          description: |
            "ServerName is used to verify the hostname on the returned
            certificates unless InsecureSkipVerify is given. It is also included
            in the client's handshake to support virtual hosting unless it is
            an IP address."
        rootCAs:
          type: array
          description: |
            "RootCAs defines the set of root certificate authorities
            that clients use when verifying server certificates.
            If RootCAs is nil, TLS uses the host's root CA set."
          items:
            type: string
            description: |
              "Path to the RootCA certificate."
